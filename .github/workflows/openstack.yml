on: [push]

env:
  TF_VAR_user: ${{ secrets.OS_USERNAME }}
  TF_VAR_application_credential_id: ${{ secrets.OS_APPLICATION_CREDENTIAL_ID }}
  TF_VAR_application_credential_secret: ${{ secrets.OS_APPLICATION_CREDENTIAL_SECRET }}
  TF_VAR_ssh_access_key: ${{ secrets.OS_SSH_KEY }}
  TF_VAR_os_auth_region: ${{ secrets.OS_AUTH_REGION }}
  TF_VAR_os_auth_url: ${{ secrets.OS_AUTH_URL }}
  TF_VAR_os_project_domain_name: ${{ secrets.OS_PROJECT_DOMAIN_NAME }}
  TF_VAR_os_password: ${{ secrets.OS_PASSWORD }}
  tf_working_directory: "./.github/workflows/openstack/terraform"

jobs: 
    terraform_openstack:
        runs-on: self-hosted
        defaults:
          run:
            working-directory: "./.github/workflows/openstack/terraform"
        steps:
        - uses: actions/checkout@v4
        - uses: hashicorp/setup-terraform@v3.1.1
          with:
            terraform_version: "1.8.3"

        - name: Terraform fmt
          id: fmt
          run: |
            terraform fmt -check
          continue-on-error: true

        - name: Terraform Init
          id: init
          run: |
            terraform init

        - name: Terraform Plan
          id: plan
          run: |
            terraform plan -no-color

        - name: Terraform Apply
          id: apply
          run: |
            terraform apply -no-color -auto-approve

        - name: Terraform Output File Create
          run: |
            terraform output -json > tf.out.json

        - name: Get VM IP from Terraform Output File
          id: get_vm_ip
          run: echo "VM_IP=$(jq -r '.address.value' tf.out.json) >> "$GITHUB_OUTPUT"

        - name: Export VM_IP to Env
          env:
            VM_IP: ${{ steps.get_vm_ip.outputs.VM_IP }}
          run: echo "The VM IP is $VM_IP"

        - name: Upload Output
          uses: actions/upload-artifact@v4
          with:
            name: terraform_output_json
            path: tf.out.json
            overwrite: true
